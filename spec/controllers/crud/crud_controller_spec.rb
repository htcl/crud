require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Crud
  describe CrudController do

    # This should return the minimal set of attributes required to create a valid
    # User. As you add validations to User, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      FactoryGirl.attributes_for(:user)
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # UsersController. Be sure to keep this updated too.
    def valid_session
      {}
    end

    describe "GET index" do
      it "assigns all users as @users" do
        user = User.create! valid_attributes
        get :index, {:class_name => 'User', :use_route => :crud}, valid_session
        assigns(:klass_data).should eq([user])
      end
    end

    describe "GET show" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :show, {:class_name => 'User', :id => user.to_param, :use_route => :crud}, valid_session
        assigns(:klass_data).should eq(user)
      end
    end

    describe "GET new" do
      it "assigns a new user as @user" do
        get :new, {:class_name => 'User', :use_route => :crud}, valid_session
        assigns(:klass_data).should be_a_new(User)
      end
    end

    describe "GET edit" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        get :edit, {:class_name => 'User', :id => user.to_param, :use_route => :crud}, valid_session
        assigns(:klass_data).should eq(user)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new User" do
          expect {
            post :create, {:class_name => 'User', :user => valid_attributes, :use_route => :crud}, valid_session
          }.to change(User, :count).by(1)
        end

        it "assigns a newly created user as @user" do
          post :create, {:class_name => 'User', :user => valid_attributes, :use_route => :crud}, valid_session
          assigns(:klass_data).should be_a(User)
          assigns(:klass_data).should be_persisted
        end

        it "redirects to the created user" do
          post :create, {:class_name => 'User', :user => valid_attributes, :use_route => :crud}, valid_session
          response.should redirect_to( show_path(:class_name => 'User', :id => User.last.id) )
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved user as @user" do
          # Trigger the behaviour that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          post :create, {:class_name => 'User', :user => { "username" => nil }, :use_route => :crud}, valid_session
          assigns(:klass_data).should be_a_new(User)
        end

        it "re-renders the 'new' template" do
          # Trigger the behaviour that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          post :create, {:class_name => 'User', :user => { "username" => nil }, :use_route => :crud}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested user" do
          user = User.create! valid_attributes
          # Assuming there are no other users in the database, this
          # specifies that the User created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          User.any_instance.should_receive(:update_attributes).with({ "username" => "MyString" })
          put :update, {:class_name => 'User', :id => user.to_param, :user => { "username" => "MyString" }, :use_route => :crud}, valid_session
        end

        it "assigns the requested user as @user" do
          user = User.create! valid_attributes
          put :update, {:class_name => 'User', :id => user.to_param, :user => valid_attributes, :use_route => :crud}, valid_session
          assigns(:klass_data).should eq(user)
        end

        it "redirects to the user" do
          user = User.create! valid_attributes
          put :update, {:class_name => 'User', :id => user.to_param, :user => valid_attributes, :use_route => :crud}, valid_session
          response.should redirect_to( show_path(:class_name => 'User', :id => user.to_param) )
        end
      end

      describe "with invalid params" do
        it "assigns the user as @user" do
          user = User.create! valid_attributes
          # Trigger the behaviour that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:class_name => 'User', :id => user.to_param, :user => { "username" => nil }, :use_route => :crud}, valid_session
          assigns(:klass_data).should eq(user)
        end

        it "re-renders the 'edit' template" do
          user = User.create! valid_attributes
          # Trigger the behaviour that occurs when invalid params are submitted
          User.any_instance.stub(:save).and_return(false)
          put :update, {:class_name => 'User', :id => user.to_param, :user => { "username" => nil }, :use_route => :crud}, valid_session
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested user" do
        user = User.create! valid_attributes
        expect {
          delete :destroy, {:class_name => 'User', :id => user.to_param, :use_route => :crud}, valid_session
        }.to change(User, :count).by(-1)
      end

      it "redirects to the users list" do
        user = User.create! valid_attributes
        delete :destroy, {:class_name => 'User', :id => user.to_param, :use_route => :crud}, valid_session
        response.should redirect_to(index_path(:class_name => 'User'))
      end
    end

  end
end
